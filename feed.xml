<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://ksm02071.github.io/</id><title>공부하고 기록하고</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-06-22T13:06:08+09:00</updated> <author> <name>Kim sung min</name> <uri>https://ksm02071.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://ksm02071.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://ksm02071.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Kim sung min </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>생성자 (Constructor)</title><link href="https://ksm02071.github.io/posts/Constructor/" rel="alternate" type="text/html" title="생성자 (Constructor)" /><published>2021-06-21T18:51:00+09:00</published> <updated>2021-06-22T13:05:40+09:00</updated> <id>https://ksm02071.github.io/posts/Constructor/</id> <content src="https://ksm02071.github.io/posts/Constructor/" /> <author> <name>Kim</name> </author> <category term="Java" /> <summary> </summary> </entry> <entry><title>Object 클래스</title><link href="https://ksm02071.github.io/posts/ObjectClass/" rel="alternate" type="text/html" title="Object 클래스" /><published>2021-06-19T15:09:00+09:00</published> <updated>2021-06-22T13:05:40+09:00</updated> <id>https://ksm02071.github.io/posts/ObjectClass/</id> <content src="https://ksm02071.github.io/posts/ObjectClass/" /> <author> <name>Kim</name> </author> <category term="Java" /> <summary> Object 모든 클래스의 조상인 Object 클래스에 대해서 알아보겠습니다. 도움받은 사이트 : 생활코딩 Object 클래스 먼저 자바에서 상속이란 것은 필수적 이라고 합니다 우리가 상속을 하든 안하든 기본적인 상속을 하게 된다고 하였는데요 예를들어 이런 코드가 있다고 가정해보겠습니다 package org.opentutorials.javatutorials.progenitor; class O {} 위 코드는 아래 코드와 같습니다 package org.opentutorials.javatutorials.progenitor; class O extends Object {} 자바에서 모든 클래스는 Object 를 암시적으로 상속받고 있다고 하는데 그런 점에서 Object는 모든 클래스의 조상... </summary> </entry> <entry><title>상속</title><link href="https://ksm02071.github.io/posts/Extend/" rel="alternate" type="text/html" title="상속" /><published>2021-06-17T23:02:00+09:00</published> <updated>2021-06-22T13:05:40+09:00</updated> <id>https://ksm02071.github.io/posts/Extend/</id> <content src="https://ksm02071.github.io/posts/Extend/" /> <author> <name>Kim</name> </author> <category term="Java" /> <summary> 상속 파헤치기 !! 자바의 상속 에 대해서 알아보고자 합니다. 자바에서 상속은 말 그대로 자식이 부모로부터 무언가를 물려받는 것 이라고 쉽게 설명 할 수 있습니다. 먼저 클래스 파악하기 에서 예제로 사용했던 Animal 클래스에 이어서 학습내용에 사용할 수 있다고 판단되어 포스팅을 하고자 합니다 Animal 클래스를 상속하는 Dog 클래스 준비한 클래스는 Animal 클래스와 Dog 클래스를 준비 해 보았습니다 ※ Animal 클래스 Dog 클래스 각각 파일을 만들어 줍니다. Animal 클래스 코드는 다음과 같습니다 public class Animal { String name ; // Animal 클래스의 멤버 변수 public void setName(String name)... </summary> </entry> <entry><title>예외처리</title><link href="https://ksm02071.github.io/posts/Exception/" rel="alternate" type="text/html" title="예외처리" /><published>2021-06-17T16:42:00+09:00</published> <updated>2021-06-22T13:05:40+09:00</updated> <id>https://ksm02071.github.io/posts/Exception/</id> <content src="https://ksm02071.github.io/posts/Exception/" /> <author> <name>Kim</name> </author> <category term="Java" /> <summary> Exception 예외처리는 프로그램이 시작될 때 예기치 못한 상황이 오면 예외적인 발생에 적절하게 대응할 수 있는 것 을 말합니다 즉 예외처리 는 실행중인 프로그램이 갑작스럽게 비정상적인 종료를 막아주고 정상적인 실행상태를 유지할 수 있도록 하는 것 입니다 예시 int userAge = scan.nextInt(); 예를들어 userAge 객체에 정수 이외에 다른 타입의 자료형을 입력하였을때 프로그램은 에러를 발생하면서 종료되는게 일반적입니다 하지만 예외처리를 해준다면 프로그램은 종료되지 않고 유지할 수 있게됩니다 ※ 예외처리를 사용할때 키워드는 try / catch 를 사용합니다 (1) 예시에 userAge에 정수 이외에 다른 문자가 입력되면 에러가 발생합니다 (Java에서 미리 ... </summary> </entry> <entry><title>메소드(Method) 파악하기</title><link href="https://ksm02071.github.io/posts/javaMethod/" rel="alternate" type="text/html" title="메소드(Method) 파악하기" /><published>2021-06-17T13:52:00+09:00</published> <updated>2021-06-22T13:05:40+09:00</updated> <id>https://ksm02071.github.io/posts/javaMethod/</id> <content src="https://ksm02071.github.io/posts/javaMethod/" /> <author> <name>Kim</name> </author> <category term="Java" /> <summary> 메소드 보통 다른언어에는 함수라는 것이 별도로 존재합니다 하지만 자바에서는 클래스를 떠나 존재하는 것은 있 을 수 없기 때문에 자바의 함수는 따로 존재하지 않고 클래스 내에 존재합니다 따라서 자바는 클래스 내의 함수를 메소드라고 부릅니다. 이번 메소드에서는 입출력 위주로 메소드에 대해서 좀 더 자세히 알아 볼 필요가 있습니다 메소드를 설명하기 전에 믹서기를 생각해봅시다 믹서기 믹서기에 과일을 넣는다 → 믹서기를 이용해서 과일을 갈아 주스를 만든다 보통 믹서기는 위와 같은 방법으로 작동합니다 이것을 프로그래밍 으로 생각해보면 과일을 넣는다 는 입력이 되고 믹서기를 이용해서 과일을 갈아 주스를 만드는 것은 출력이 되는 것 처럼 볼 수 있습니다 여기서 믹서기는 메소드 역할을 하는것 과 같습니다... </summary> </entry> </feed>
